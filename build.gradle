/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
    }
    maven {
        url "https://repository.springsource.com/maven/bundles/release"
    }
    maven {
        url "https://repository.springsource.com/maven/bundles/external"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Use JUnit test framework.
    //testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.github.apache:commons-math:MATH_3_6_RC2'
    implementation 'com.github.CST-Group:cst:06ab2da'
    implementation 'com.github.sh0nk:matplotlib4j:0.5.0'
    //implementation 'com.github.CST-Group:cst-desktop:1.0.5'
    //implementation 'com.github.CST-Group:WS3D-Coppelia:main-SNAPSHOT'
    implementation 'org.json:json:20180813'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.graphstream:gs-core:2.0'
    implementation 'org.graphstream:gs-algo:2.0'
    implementation 'org.graphstream:gs-ui-swing:2.0'
    implementation group: 'co.nstant.in', name: 'cbor', version:'0.9'
    implementation group: 'org.zeromq', name: 'jeromq', version:'0.5.2'
    implementation fileTree(dir: 'libs', include: '*.jar')
    //testImplementation group: 'junit', name: 'junit', version: '4.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

application {
    // Define the main class for the application.
    mainClass = 'CSTEpisodicMemory.Main'
}
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier = 'full'
    manifest {
      attributes(
        'Main-Class': 'CSTEpisodicMemory.Main'
      )
    }
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

tasks.withType(JavaCompile) {
    options.release = 17
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('test-coverage')
        dependsOn test // tests are required to run before generating the report
    }
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    useJUnitPlatform()
}

